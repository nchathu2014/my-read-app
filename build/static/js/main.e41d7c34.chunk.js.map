{"version":3,"sources":["BooksAPI.js","utils/Utils.js","components/BooksTitle/BooksTitle.js","components/BookList/BookListItem/BookListItem.js","components/BookList/BookList.js","constants/GLOBAL_CONSTANTS.js","components/SearchBook/SearchBook.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","filterUsefulBookInfo","map","title","authors","pageCount","previewLink","publishedDate","publisher","_book$imageLinks","imageLinks","_book$imageLinks$thum","thumbnail","_book$imageLinks$smal","smallThumbnail","debounce","fn","delay","timer","clearTimeout","setTimeout","BookTitle","_ref","totalBooks","react_default","a","createElement","className","style","float","color","BookListItem","list","message","length","fontStyle","fontWeight","BookList","changeBookShelf","getBookShelf","filter","key","width","height","backgroundImage","defaultValue","onChange","event","target","value","handleShelfChange","disabled","href","BookList_BookListItem_BookListItem","GLOBAL_CONSTANTS","DEBOUNCE_TIME","SearchBook","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchForBooks","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","state","searchQuery","BooksAPI","sent","hasOwnProperty","setState","booksList","Utils","stop","handleOnSearch","handleMoveToShelf","handleBookShelf","_ref2","_callee2","bookSelected","_context2","bookShelf","_x","_x2","apply","arguments","handleOnKeyUp","getSearchData","_this2","react_router_dom","to","type","placeholder","onKeyUp","onClick","Component","BooksApp","bookList","showSearchPage","handleChangeBookShelf","toShelf","react_router","path","render","components_SearchBook_SearchBook","exact","BooksTitle_BooksTitle","components_BookList_BookList","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e41d7c34.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","/**\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n *\r\n * **/\r\n\r\n\r\n/**\r\n * This function filter-down the bare minimum information from the books array\r\n * @param books\r\n * @returns {*}\r\n */\r\nexport const filterUsefulBookInfo = (books) => {\r\n    return books.map(book => {\r\n            const {id, title, authors, shelf, pageCount,previewLink,publishedDate, publisher,imageLinks: {thumbnail={},smallThumbnail={}}={}} = book;\r\n            return {\r\n                id,\r\n                title,\r\n                authors,\r\n                shelf,\r\n                publishedDate,\r\n                previewLink,\r\n                publisher,\r\n                pageCount,\r\n                thumbnail,\r\n                smallThumbnail\r\n            }\r\n        }\r\n    );\r\n};\r\n\r\n/**\r\n * This function improves the performance of the application in the search page\r\n * @param fn\r\n * @param delay\r\n * @returns {Function}\r\n */\r\nexport const debounce = (fn,delay) => {\r\n    let timer;\r\n    return ()=> {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(()=>fn(),delay)\r\n    }\r\n};","/**\r\n * =================================================================================================\r\n *\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n * BookTitle: This component is a place holder for a menu bar in future enhancement\r\n * Functions: BookTitle(title, totalBooks)*\r\n *\r\n * =================================================================================================\r\n * **/\r\n\r\nimport React from \"react\";\r\nimport \"./BooksTitle.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Styles\r\nimport \"./BooksTitle.css\";\r\n\r\n//Prop Validation\r\nBookTitle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    totalBooks: PropTypes.number.isRequired\r\n};\r\n\r\nfunction BookTitle({title, totalBooks}) {\r\n    return (\r\n        <div className=\"list-books-title\">\r\n            <h1>{title}\r\n                <span\r\n                    style={{float: \"right\", color: \"yellow\"}}\r\n                >Shelves books: #{totalBooks}\r\n            </span>\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookTitle;","/**\r\n * =================================================================================================\r\n *\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n * BookListItem: Granular level functional component, shows book list item\r\n * Functions: BookListItem(title, list)\r\n *\r\n * =================================================================================================\r\n * **/\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Style file\r\nimport \"./BookListItem.css\";\r\n\r\n//Prop validation\r\nBookListItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    list: PropTypes.array.isRequired\r\n};\r\n\r\n/**\r\n * This function populate the book list item with the proper data loading messages\r\n * @title:string\r\n * @list: Array\r\n * **/\r\nfunction BookListItem({title, list}) {\r\n    let message = \"Loading...\";\r\n\r\n    list.length === 0 ?\r\n        message = 'No content'\r\n        :\r\n        message = '';\r\n\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">\r\n                {title}\r\n                <span style={{\r\n                    float: \"right\",\r\n                    color: \"#bbb\",\r\n                    fontStyle: \"italic\",\r\n                    fontWeight: \"normal\"\r\n                }}>#{list.length} Books</span>\r\n            </h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {list}{message}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookListItem;","/**\r\n * =================================================================================================\r\n *\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n * BookList: This component populates the books in to shelve and let the user to shifting books among\r\n * shelves\r\n * Functions: handleShelfChange(event, book), getBookShelf(shelf)\r\n *\r\n * =================================================================================================\r\n * **/\r\nimport React from \"react\";\r\nimport BookListItem from \"./BookListItem/BookListItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Style file\r\nimport \"./BookList.css\";\r\n\r\n//Prop validation\r\nBookList.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n};\r\n\r\nfunction BookList({books, changeBookShelf}) {\r\n\r\n    /**\r\n     * This function pass the callback to the parent with the shelf change value and\r\n     * the corresponding book object\r\n     * @book:Object\r\n     * @event:Object\r\n     * */\r\n    const handleShelfChange = (event, book) => {\r\n        changeBookShelf(event.target.value, book)\r\n    };\r\n\r\n\r\n    /**\r\n     * This function get the shelf and returns the books with the\r\n     * corresponding shelf type\r\n     *@shelf: string\r\n     * **/\r\n    const getBookShelf = (shelf) => {\r\n        return books\r\n            .filter(book => book.shelf === shelf)\r\n            .map(book => {\r\n                const {id, title, pageCount, previewLink,publishedDate, publisher,thumbnail, authors, shelf} = book;\r\n                return (\r\n                    <li key={id}>\r\n                        <div className=\"book\">\r\n                            <div className=\"book-top\">\r\n                                <div className=\"book-cover\"\r\n                                     style={{width: 128, height: 193, backgroundImage: `url(${thumbnail})`}}></div>\r\n                                <div className=\"book-shelf-changer\">\r\n                                    <select  defaultValue=\"move\"\r\n                                             onChange={(event) => handleShelfChange(event, book)}>\r\n                                        <option value=\"move\" disabled>Move to...</option>\r\n                                        <option value=\"currentlyReading\">\r\n                                            {shelf === \"currentlyReading\" ? \"✓\" : \" \"}Currently Reading\r\n                                        </option>\r\n                                        <option value=\"wantToRead\">\r\n                                            {shelf === \"wantToRead\" ? \"✓\" : \" \"} Want to Read\r\n                                        </option>\r\n                                        <option value=\"read\">\r\n                                            {shelf === \"read\" ? \"✓\" : \" \"} Read\r\n                                        </option>\r\n                                        <option value=\"none\">None</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"book-title\">{title}</div>\r\n                            <div className=\"book-authors\">\r\n                                {authors.toString()}\r\n                            </div>\r\n                            <div className=\"book-more-info\">\r\n                                <ul>\r\n                                    <li><span>Publisher: </span>{publisher?publisher:'Unknown'}</li>\r\n                                    <li><span>Pub.Date: </span>{publishedDate}</li>\r\n                                    <li><span>Pages: </span>{pageCount}</li>\r\n                                    <li>\r\n                                        <a href={previewLink} target=\"_blank\">Preview</a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                );\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"list-books-content\">\r\n            <div>\r\n                <BookListItem\r\n                    title={'Currently Reading'}\r\n                    list={getBookShelf('currentlyReading')}\r\n                />\r\n\r\n                <BookListItem\r\n                    title={'Want to Read'}\r\n                    list={getBookShelf('wantToRead')}\r\n                />\r\n\r\n                <BookListItem\r\n                    title={'Read'}\r\n                    list={getBookShelf('read')}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookList;","/**\r\n * =================================================================================================\r\n *\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n * File: This file contains the app level constants\r\n * Functions: None\r\n * =================================================================================================\r\n * **/\r\n\r\nexport const GLOBAL_CONSTANTS = {\r\n    DEBOUNCE_TIME: 500\r\n};","/**\r\n * =================================================================================================\r\n *\r\n * Author: T.D. Nuwan Chathuranga\r\n * Date: 30/10/2020\r\n * SearchBook: This component executes the searching functionality of the app\r\n * Functions: searchForBooks(), handleOnSearch(event), handleMoveToShelf(event, book),handleOnKeyUp()\r\n * =================================================================================================\r\n * **/\r\n\r\nimport React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport * as BooksAPI from \"./../../BooksAPI\";\r\nimport * as Utils from \"./../../utils/Utils\";\r\n\r\n// Constants\r\nimport {GLOBAL_CONSTANTS} from \"./../../constants/GLOBAL_CONSTANTS\";\r\n\r\n//Styles\r\nimport \"./SearchBook.css\";\r\n\r\nclass SearchBook extends Component {\r\n\r\n    //Prop validation\r\n    static propTypes = {\r\n        changeBookShelf: PropTypes.func.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchQuery: '',\r\n            booksList: [],\r\n            bookShelf: ''\r\n        };\r\n        this.getSearchData = Utils.debounce(this.searchForBooks, GLOBAL_CONSTANTS.DEBOUNCE_TIME);\r\n    }\r\n\r\n    /**\r\n     * This function calls to the search API endpoint and stores the search results into\r\n     * a internal state\r\n     */\r\n    searchForBooks = async () => {\r\n        if (this.state.searchQuery !== '') {\r\n\r\n            const books = await BooksAPI.search(this.state.searchQuery)\r\n\r\n            if (!(typeof books === 'object' && books.hasOwnProperty('error'))) {\r\n                this.setState({\r\n                    booksList: Utils.filterUsefulBookInfo(books)\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    booksList: [],\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                searchQuery: '',\r\n                booksList: [],\r\n            })\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This function handles the search functionality with a debounce time\r\n     * @param event\r\n     */\r\n    handleOnSearch = (event) => {\r\n        this.setState({\r\n            searchQuery: event.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This function control the book shelf assigning functionality\r\n     * @param event\r\n     * @param book\r\n     * */\r\n    handleMoveToShelf = (event, book) => {\r\n        this.props.changeBookShelf(event.target.value, book);\r\n    };\r\n\r\n    /**\r\n     * This function control showing the relevant shelf type by calling the API call\r\n     * @param event\r\n     * @param book\r\n     * */\r\n    handleBookShelf = async (event, book) => {\r\n\r\n        const bookSelected = await BooksAPI.get(book.id);\r\n        this.setState({\r\n            bookShelf: bookSelected.shelf\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This function calls the debounce method when user typed in to the search box\r\n     */\r\n    handleOnKeyUp = () => {\r\n        this.getSearchData();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to=\"/\" className=\"close-search\"/>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title or author\"\r\n                            onChange={(event) => this.handleOnSearch(event)}\r\n                            onKeyUp={this.handleOnKeyUp}\r\n                            value={this.state.searchQuery}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n\r\n                    <ol className=\"books-grid\">\r\n                        {this.state.booksList.map(book => (\r\n                            <li key={book.id}>\r\n                                <div className=\"book\">\r\n                                    <div className=\"book-top\">\r\n                                        <div className=\"book-cover\"\r\n                                             style={{\r\n                                                 width: 128,\r\n                                                 height: 193,\r\n                                                 backgroundImage: `url(${book.smallThumbnail})`\r\n                                             }}></div>\r\n                                        <div className=\"book-shelf-changer\">\r\n                                            <select defaultValue=\"move\"\r\n                                                    onClick={(event) => this.handleBookShelf(event, book)}\r\n                                                    onChange={(event) => this.handleMoveToShelf(event, book)}>\r\n                                                <option value=\"move\" disabled>Move to...</option>\r\n                                                <option value=\"currentlyReading\">\r\n                                                    {this.state.bookShelf === \"currentlyReading\" ? \"✓\" : \" \"}Currently\r\n                                                    Reading\r\n                                                </option>\r\n                                                <option value=\"wantToRead\">\r\n                                                    {this.state.bookShelf === \"wantToRead\" ? \"✓\" : \" \"} Want to Read\r\n                                                </option>\r\n                                                <option value=\"read\">\r\n                                                    {this.state.bookShelf === \"read\" ? \"✓\" : \" \"} Read\r\n                                                </option>\r\n                                                <option value=\"none\">\r\n                                                    {this.state.bookShelf === \"none\" ? \"✓\" : \" \"} None\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"book-title\">{book.title}</div>\r\n                                    <div className=\"book-authors\">\r\n                                        {(book && book.authors) && book.authors.toString()}\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBook;","/**\n * =================================================================================================\n *\n * Author: T.D. Nuwan Chathuranga\n * Date: 30/10/2020\n * BookApp: This component is the parent component of the app\n * Functions: handleChangeBookShelf(toShelf, book),componentDidMount()*\n *\n * =================================================================================================\n * **/\n\nimport React from \"react\";\nimport {Link, Route} from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport * as Utils from \"./utils/Utils\";\nimport BookTitle from \"./components/BooksTitle/BooksTitle\";\nimport BookList from \"./components/BookList/BookList\";\nimport SearchBook from \"./components/SearchBook/SearchBook\";\n\n//Style files\nimport \"./App.css\";\n\nclass BooksApp extends React.Component {\n    //App state\n    state = {\n        bookList: [],\n        showSearchPage: false\n    };\n\n    /**\n     * This function handles the shelf book by calling the update API call\n     * @toShelf: string\n     * @book: Object\n     * */\n     handleChangeBookShelf = async(toShelf, book) => {\n\n        await BooksAPI.update(book, toShelf);\n        const books = await BooksAPI.getAll();\n        this.setState({\n            bookList: Utils.filterUsefulBookInfo(books)\n        });\n\n        /*BooksAPI.update(book, toShelf).then(() => {\n            BooksAPI.getAll().then(books => {\n                this.setState(() => ({\n                    bookList: Utils.filterUsefulBookInfo(books)\n                }));\n            });\n        });*/\n\n    };\n\n    async componentDidMount() {\n        //Call for all books for initial data population\n        const books = await BooksAPI.getAll();\n        this.setState({\n            bookList: Utils.filterUsefulBookInfo(books)\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Route\n                    path=\"/search\"\n                    render={() => (\n                        <SearchBook\n                            changeBookShelf={this.handleChangeBookShelf}\n                        />)}\n                />\n\n\n                <div className=\"list-books\">\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={() => (\n                            <div>\n                                <BookTitle\n                                    title=\"My Reads\"\n                                    totalBooks={this.state.bookList.length}\n                                />\n                                <BookList\n                                    books={this.state.bookList}\n                                    changeBookShelf={this.handleChangeBookShelf}\n                                />\n                                <div className=\"open-search\">\n                                    <Link\n                                        className=\"open-search\"\n                                        to=\"/search\">Add a book\n                                    </Link>\n                                </div>\n                            </div>\n                        )}\n                    />\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n"],"sourceRoot":""}